/*
FOR T IN (SELECT DIA, HORA, MINUTO FROM DIA, HORA, MINUTO) LOOP
   
END LOOP;

CREATE OR REPLACE PACKAGE BODY ICALC AS

    CREATE TABLE DIA (DIA CHAR(2););
    CREATE TABLE HORA (HORA NUMBER(2););
    CREATE TABLE MINUTO (MINUTO NUMBER(2););

    PROCEDURE CREA_ELEMENTOS (
        P_ID    IN ENTRENADOR.ID%TYPE,
        P_ANNO  IN NUMBER,
        P_MES   IN NUMBER
    ) AS
    DECLARE
        C_REGLA_EXPREG CONSTANT VARCHAR2(14) := '[A-Z0-9:,;]+';

        V_DISPONIBILIDAD ENTRENADOR.DISPONIBILIDAD%TYPE;
        V_CONTADOR_REGLA NUMBER(3);
        V_REGLA ENTRENADOR.DISPONIBILIDAD%TYPE;
        V_FECHA DATE;
        V_FIN DATE;
    BEGIN
        --SELECT entrenador.disponibilidad INTO disponibilidad WHERE entrenador.id = P_ID;
        --disponibilidad := SELECT entrenador.disponibilidad WHERE entrenador.id = P_ID;
        SELECT UPPER(DISPONIBILIDAD)
            INTO V_DISPONIBILIDAD
            FROM ENTRENADOR
            WHERE P_ID = ID;
        
        V_CONTADOR_REGLA := 1;
       -- V_REGLA := REGEXP_SUBSTR(V_DISPONIBILIDAD, C_REGLA_EXPREG, V_CONTADOR_REGLA);
        V_FECHA := TO_DATE(P_ANNO||'/'||P_MES||'/1', 'YYYY/MM/DD');
        V_FIN := ADD_MONTHS(V_FECHA, 1);
        WHILE V_FECHA < V_FIN LOOP
            V_CONTADOR_REGLA = V_CONTADOR_REGLA + 1;
            V_REGLA := REGEXP_SUBSTR(V_DISPONIBILIDAD, C_REGLA_EXPREG, 1, V_CONTADOR_REGLA);
            WHILE V_REGLA IS NOT NULL LOOP
                IF V_DIA = SUBSTR(TO_CHAR(V_FECHA, 'DAY', 'NLS_DATE_LANGUAGE=AMERICAN'), 1, ) THEN
                    INSERT INTO ELEMENTO_CALENDARIO VALUES (P_ID, V_FECHA + (V_HORA / 24 + V_MINUTO / (24*60)))
                END IF;
            END LOOP;
        END LOOP;
    END CREA_ELEMENTOS;

END ICALC;

*/

CREATE OR REPLACE PACKAGE BODY ICALC AS

    PROCEDURE CREA_ELEMENTOS (
        P_ID    IN ENTRENADOR.ID%TYPE,
        P_ANNO  IN NUMBER,
        P_MES   IN NUMBER
    ) IS
    BEGIN
        NULL; -- No hace nada y devuelve NULL
    END CREA_ELEMENTOS;

END ICALC;
/